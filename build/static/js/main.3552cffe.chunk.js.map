{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","concat","CONTRACT_ADDRESS","App","_useState","useState","_useState2","_slicedToArray","currentAccount","setCurrentAccount","checkIfWalletIsConnected","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_window","ethereum","accounts","account","wrap","_context","prev","next","window","console","log","abrupt","request","method","sent","length","setupEventListener","stop","apply","arguments","connectWallet","_ref2","_callee2","_window2","_context2","alert","t0","_ref3","_callee3","_window3","provider","signer","_context3","ethers","providers","Web3Provider","getSigner","Contract","myEpicNft","abi","on","from","tokenId","toNumber","error","askContractToMintNft","_ref4","_callee4","_window4","connectedContract","nftTxn","_context4","Mint","wait","hash","useEffect","_jsx","className","children","_jsxs","onClick","alt","src","twitterLogo","href","target","rel","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"yxpEAAe,G,MAAA,IAA0B,0C,uBCMnCA,EAAiB,kBACjBC,EAAY,uBAAAC,OAA0BF,GAItCG,EAAmB,6CA+IVC,EA7IH,WACV,IAAAC,EAA4CC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjDI,EAAcF,EAAA,GAAEG,EAAiBH,EAAA,GAElCI,EAAwB,eAAAC,EAAAC,YAAAC,cAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAN,cAAAO,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACf,GADeP,EACVQ,OAAbP,EAAQD,EAARC,SAEM,CAADI,EAAAE,KAAA,QACiC,OAA5CE,QAAQC,IAAI,gCAAgCL,EAAAM,OAAA,iBAG5CF,QAAQC,IAAI,8BAA+BT,GAAU,cAAAI,EAAAE,KAAA,EAGhCN,EAASW,QAAQ,CAAEC,OAAQ,iBAAkB,KAAD,EAE3C,KAFlBX,EAAQG,EAAAS,MAEDC,QACLZ,EAAUD,EAAS,GACzBO,QAAQC,IAAI,+BAAgCP,GAC5CV,EAAkBU,GAClBa,KAEAP,QAAQC,IAAI,+BACb,yBAAAL,EAAAY,OAAA,GAAAlB,EAAA,KACF,kBApB6B,OAAAJ,EAAAuB,MAAA,KAAAC,UAAA,KAyBxBC,EAAa,eAAAC,EAAAzB,YAAAC,cAAAC,MAAG,SAAAwB,IAAA,IAAAC,EAAAtB,EAAAC,EAAA,OAAAL,cAAAO,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEF,GAFEiB,EAAAlB,KAAA,EAAAiB,EAEGf,OAAbP,EAAQsB,EAARtB,SAEM,CAADuB,EAAAjB,KAAA,QACY,OAAvBkB,MAAM,iBAAiBD,EAAAb,OAAA,wBAAAa,EAAAjB,KAAA,EAIFN,EAASW,QAAQ,CAAEC,OAAQ,wBAAyB,KAAD,EAApEX,EAAQsB,EAAAV,KAEdL,QAAQC,IAAI,YAAaR,EAAS,IAClCT,EAAkBS,EAAS,IAC3Bc,IAAoBQ,EAAAjB,KAAA,iBAAAiB,EAAAlB,KAAA,GAAAkB,EAAAE,GAAAF,EAAA,SAEpBf,QAAQC,IAAGc,EAAAE,IAAQ,yBAAAF,EAAAP,OAAA,GAAAK,EAAA,mBAEtB,kBAjBkB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KAmBZH,EAAkB,eAAAW,EAAA/B,YAAAC,cAAAC,MAAG,SAAA8B,IAAA,IAAAC,EAAA5B,EAAA6B,EAAAC,EAAA,OAAAlC,cAAAO,MAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAC1B,IAAIsB,EACmBrB,QAAbP,EAAQ4B,EAAR5B,WAGA6B,EAAW,IAAIG,IAAOC,UAAUC,aAAalC,GAC7C8B,EAASD,EAASM,YACE,IAAIH,IAAOI,SAASnD,EAAkBoD,EAAUC,IAAKR,GAE7DS,GAAG,aAAa,SAACC,EAAMC,GACvCjC,QAAQC,IAAI+B,EAAMC,EAAQC,YAC1BlB,MAAM,kMAADxC,OAAmMC,EAAgB,KAAAD,OAAIyD,EAAQC,YACtO,IAEAlC,QAAQC,IAAI,0BAGZD,QAAQC,IAAI,iCAEhB,CAAE,MAAOkC,GACPnC,QAAQC,IAAIkC,EACd,CAAC,wBAAAZ,EAAAf,OAAA,GAAAW,EAAA,KACF,kBAtBwB,OAAAD,EAAAT,MAAA,KAAAC,UAAA,KAwBnB0B,EAAoB,eAAAC,EAAAlD,YAAAC,cAAAC,MAAG,SAAAiD,IAAA,IAAAC,EAAA/C,EAAA6B,EAAAC,EAAAkB,EAAAC,EAAA,OAAArD,cAAAO,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OAEX,GAFW4C,EAAA7C,KAAA,EAAA0C,EAENxC,SAAbP,EAAQ+C,EAAR/C,UAEK,CAADkD,EAAA5C,KAAA,SAK0C,OAJ9CuB,EAAW,IAAIG,IAAOC,UAAUC,aAAalC,GAC7C8B,EAASD,EAASM,YAClBa,EAAoB,IAAIhB,IAAOI,SAASnD,EAAkBoD,EAAUC,IAAKR,GAE/EtB,QAAQC,IAAI,yCAAwCyC,EAAA5C,KAAA,EACjC0C,EAAkBG,OAAO,KAAD,EAEP,OAFhCF,EAAMC,EAAArC,KAEVL,QAAQC,IAAI,yBAAwByC,EAAA5C,KAAA,GAC9B2C,EAAOG,OAAO,KAAD,GAEnB5C,QAAQC,IAAI,0DAADzB,OAA2DiE,EAAOI,OAAQH,EAAA5C,KAAA,iBAGrFE,QAAQC,IAAI,kCAAkC,QAAAyC,EAAA5C,KAAA,iBAAA4C,EAAA7C,KAAA,GAAA6C,EAAAzB,GAAAyB,EAAA,SAGhD1C,QAAQC,IAAGyC,EAAAzB,IAAO,yBAAAyB,EAAAlC,OAAA,GAAA8B,EAAA,mBAErB,kBAvB2B,OAAAD,EAAA5B,MAAA,KAAAC,UAAA,KA8C1B,OAPAoC,qBAAU,WACR7D,GACF,GAAG,IAMD8D,cAAA,OAAKC,UAAU,MAAKC,SAClBC,eAAA,OAAKF,UAAU,YAAWC,SAAA,CACxBC,eAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC/BF,cAAA,KAAGC,UAAU,uBAAsBC,SAAC,sBACpCF,cAAA,KAAGC,UAAU,WAAUC,SAAC,0DAGH,KAAnBlE,EA3BRgE,cAAA,UAAQI,QAASxC,EAAeqC,UAAU,mCAAkCC,SAAC,sBAM3EF,cAAA,UAAQI,QAASf,EAAsBY,UAAW,mCAAmCC,SAAC,gBAuBpFC,eAAA,OAAKF,UAAU,mBAAkBC,SAAA,CAC/BF,cAAA,OAAKK,IAAI,eAAeJ,UAAU,eAAeK,IAAKC,IACtDP,cAAA,KACEC,UAAU,cACVO,KAAMhF,EACNiF,OAAO,SACPC,IAAI,aAAYR,SAAA,aAAAzE,OACHF,YAKzB,ECnJAoF,IAASC,OACPZ,cAACa,IAAMC,WAAU,CAAAZ,SACfF,cAACrE,EAAG,MAENoF,SAASC,eAAe,Q","file":"static/js/main.3552cffe.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import React, { useEffect, useState } from \"react\";\nimport './styles/App.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport { ethers } from \"ethers\";\nimport myEpicNft from './utils/MyEpicNFT.json'\n\nconst TWITTER_HANDLE = 'BowTiedProngHrn';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = '';\nconst TOTAL_MINT_COUNT = 50;\n\nconst CONTRACT_ADDRESS = \"0x0E1769bB568B395F59ea6666feff8A302F68A880\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      setupEventListener()\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  }\n\n  /*\n  * Implement your connectWallet method here\n  */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      setupEventListener()\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n   const setupEventListener = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n        connectedContract.on(\"NFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber())\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`)\n        });\n\n        console.log(\"Setup event listener!\")\n\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const askContractToMintNft = async () => {\n  try {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n      console.log(\"Going to pop wallet now to pay gas...\")\n      let nftTxn = await connectedContract.Mint();\n\n      console.log(\"Mining...please wait.\")\n      await nftTxn.wait();\n\n      console.log(`Mined, see transaction: https://goerli.etherscan.io/tx/${nftTxn.hash}`);\n\n    } else {\n      console.log(\"Ethereum object doesn't exist!\");\n    }\n  } catch (error) {\n    console.log(error)\n  }\n}\n\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button onClick={connectWallet} className=\"cta-button connect-wallet-button\">\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n      <button onClick={askContractToMintNft} className={\"cta-button connect-wallet-button\"}>\n        Mint NFT\n      </button>\n  )\n\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, [])\n\n  /*\n  * Added a conditional render! We don't want to show Connect to Wallet if we're already connected :).\n  */\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n           {currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}